#include <stdio.h>
#include <stdbool.h>
#include "allfun.h"
#include "unity.h"

void setUp(void) {}
void tearDown(void) {}

void test_even(void) {
    TEST_ASSERT_EQUAL(1, is_even(2));
    TEST_ASSERT_TRUE(is_even(10));
    TEST_ASSERT_TRUE(is_even(8));
}

void test_noteven(void) {
    TEST_ASSERT_FALSE(is_even(1));
    TEST_ASSERT_FALSE(is_even(7));
    TEST_ASSERT_FALSE(is_even(5));
}

void test_max(void) {
    TEST_ASSERT_EQUAL(30, is_max(20, 30));
    TEST_ASSERT_EQUAL(20, is_max(20, 10));
    TEST_ASSERT_TRUE(is_max(50, 20) > 10);
    TEST_ASSERT_TRUE(is_max(10, 5) >= 10);
}

void test_min(void) {
    TEST_ASSERT_EQUAL(3, is_min(10, 3));
    TEST_ASSERT_EQUAL(5, is_min(10, 5));
    TEST_ASSERT_TRUE(is_min(2, 1) < 3);
    TEST_ASSERT_TRUE(is_min(5, 10) <= 5);
}

int main(void) {
    UNITY_BEGIN();
    RUN_TEST(test_even);
    RUN_TEST(test_noteven);
    RUN_TEST(test_max);
    RUN_TEST(test_min);
    return UNITY_END();
}
#include <stdbool.h>
#include "allfun.h"

bool is_even(int a) {
    return a % 2 == 0;
}

int is_max(int a, int b) {
    return (a > b) ? a : b;
}

int is_min(int a, int b) {
    return (a < b) ? a : b;
}
#ifndef __ALLFUN__H
#define __ALLFUN__H

#include <stdbool.h>

bool is_even(int a);
int is_max(int a, int b);
int is_min(int a, int b);

#endif
CC = gcc
CFLAGS = -Wall

SRC = main.c all_fun.c unity.c
OBJ = $(SRC:.c=.o)

all: $(OBJ)
	$(CC) $(CFLAGS) $^ -o all.exe

run: all
	./all.exe

clean:
	rm -f *.o *.exe
