#include <stdio.h>
#include "arr_swap.h"
#include "unity.h"

void setUp(void) {}
void tearDown(void) {}

void test_arr_swap(void) {
    int arr[] = {1,2,3,4,5};
    int size = 5;
    arr_swap(arr, size);
    int expected[] = {5,4,3,2,1};
    TEST_ASSERT_EQUAL_INT_ARRAY(expected, arr, size);
}

// ❌ This test will fail (kept only if you want to see Unity catching errors)
// You can remove if not needed
void test_not_arr_swap(void) {
    int arr[] = {1,2,3,4,5};
    int size = 5;
    arr_swap(arr, size);
    int expected[] = {1,4,3,2,5};
    TEST_ASSERT_EQUAL_INT_ARRAY(expected, arr, size);
}

int main(void) {
    UNITY_BEGIN();
    RUN_TEST(test_arr_swap);
    RUN_TEST(test_not_arr_swap); // comment out if you don’t want failing test
    return UNITY_END();
}
#include "arr_swap.h"

void arr_swap(int arr[], int size) {
    int *st = arr;
    int *ed = arr + size - 1;

    while (st < ed) {
        int temp = *st;
        *st = *ed;
        *ed = temp;
        st++;
        ed--;
    }
}
#ifndef __ARRSWAP__H
#define __ARRSWAP__H

void arr_swap(int arr[], int size);

#endif
CC = gcc
CFLAGS = -Wall

SRC = main.c arr_swap.c unity.c
OBJ = $(SRC:.c=.o)

all: $(OBJ)
	$(CC) $(CFLAGS) $^ -o arr_swap.exe

run: all
	./arr_swap.exe

clean:
	rm -f *.o *.exe


